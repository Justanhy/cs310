/// Sigma protocol implementation for self-stacking compiler
impl<S: Stackable> SigmaProtocol for SelfStacker<S> {
    type Statement = StackedStatement<S>;
    type Witness = StackedWitness<S::Witness>;
    type State = StackedState<S>;
    type MessageA = StackedA;
    type Challenge = S::Challenge;
    type MessageZ = StackedZ<S>;

    /// First round of the protocol
    fn first<R: CryptoRngCore + Clone>(
        statement: &StackedStatement<S>,
        witness: &StackedWitness<S::Witness>,
        prover_rng: &mut R,
    ) -> (Self::State, Self::MessageA) {
        // Deconstruct witness
        let StackedWitness {
            nested_witness,
            binding,
        } = witness;

        // First call the underlying protocol with the statement at the active clause
        let (nested_state, bound_message) = S::first(
            statement.bound_statement(binding),
            nested_witness,
            prover_rng,
        );
        // Instance of partial binding commitment scheme that we will use
        let q = statement.height();
        let qbinding = QBinding::new(q);
        // Instantiate pointer to the message from the active clause
        let bound_message = Rc::new(bound_message);

        // Determine our message vector
        let def = Rc::new(S::MessageA::default());
        let initial_messages: Vec<Rc<S::MessageA>> = (0
            ..statement.clauses())
            .map(|i| {
                // If active clause, we use the message from earlier
                if i == binding.index() {
                    bound_message.clone()
                } else {
                    // Otherwise we use the default message
                    def.clone()
                }
            })
            .collect();

        // Here we compute commitment key and equivocation key for the protocol. We appear to reuse the same
        // prover_rng but it is mutated and thus different. Still, the change is deterministic.
        let (ck, ek) = qbinding.gen(
            &statement.pp,
            *binding,
            prover_rng,
        );

        // Derive auxiliary value from prover's rng
        let aux = Randomness::random(prover_rng, q);
        // Compute commitment
        let (comm, aux) = qbinding.equivcom(
            &statement.pp,
            &ek,
            &initial_messages,
            Some(aux),
        );

        (
            StackedState {
                nested_state,
                bound_message,
                initial_messages,
                ck: ck.clone(),
                ek,
                aux,
            },
            StackedA(ck, comm),
        )
    }

    /// Second round of the protocol. Random challenge.
    fn second<R: CryptoRngCore>(
        verifier_rng: &mut R,
    ) -> Self::Challenge
    where
        Self: Sized,
    {
        let mut buffer = [0u8; 64];
        verifier_rng.fill_bytes(&mut buffer);
        Challenge::new(&buffer)
    }

    /// Third round of the protocol.
    fn third<R: CryptoRngCore + Clone>(
        statement: &Self::Statement,
        state: Self::State,
        witness: &Self::Witness,
        challenge: &Self::Challenge,
        prover_rng: &mut R,
    ) -> Self::MessageZ {
        // Deconstruct the state struct
        let StackedState {
            nested_state,
            bound_message,
            initial_messages,
            ck,
            ek,
            aux,
        } = state;

        // Deconstruct the witness struct
        let StackedWitness {
            nested_witness,
            binding,
        } = witness;
        let qbinding = QBinding::new(statement.height());

        // Call third round algorithm of underlying protocol
        let nested_z = S::third(
            statement.bound_statement(binding),
            nested_state,
            nested_witness,
            challenge,
            prover_rng,
        );

        let new_messages: Vec<Rc<S::MessageA>> = (0
            ..statement.clauses())
            .map(|i| {
                // Same as earlier, if active clause, we use the message from first round
                if i == binding.index() {
                    bound_message.clone()
                } else {
                    // Otherwise, we need to simulate the first message from statement, challenge and z from earlier
                    Rc::new(S::simulate(
                        statement
                            .statement_at(i)
                            .unwrap(),
                        challenge,
                        &nested_z,
                    ))
                }
            })
            .collect();

        // Equivocate the initial vector of messages with new messages
        // obtaining new auxiliary value
        let aux_new = qbinding.equiv(
            &statement.pp,
            &ek,
            &initial_messages,
            &new_messages,
            &aux,
        );

        StackedZ {
            ck,
            message: nested_z,
            aux: aux_new,
        }
    }

    /// Verification algorithm for the protocol
    fn verify(
        statement: &Self::Statement,
        a: &Self::MessageA,
        c: &Self::Challenge,
        z: &Self::MessageZ,
    ) -> bool
    where
        Self: Sized,
    {
        // Deconstruct variables from structs
        // Here we get the commitment key, and commitment from first round of stacking protocol
        let StackedA(ck_a, comm) = a;
        // Here we get the commitment key, messages, and aux variable from the third round of stacker
        let StackedZ {
            ck: ck_z,
            message,
            aux,
        } = z;

        // Now we go through every statement and simulate with the recyclable third round message
        // and challenge from 2nd round
        let v: Vec<Rc<S::MessageA>> = statement
            .statements()
            .iter()
            .map(|s| Rc::new(S::simulate(s, c, &message)))
            .collect();

        // Using bindcom algorithm, we compute the commitment to this vector of messages
        let comm_check = QBinding::new(statement.height())
            .bind(&statement.pp, ck_a, &v, aux);

        // Now we want to verify that the messages are valid for every clause
        let nested_check = statement
            .statements()
            .iter()
            .zip(v.iter())
            .all(|(s, m)| S::verify(s, m, c, &message));

        ck_a == ck_z && *comm == comm_check && nested_check
    }
}